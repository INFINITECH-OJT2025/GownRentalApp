import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { format } from "date-fns";
import Image from "next/image";
import AdminSidebar from "../../components/AdminSidebar";
import pdfMake from "pdfmake/build/pdfmake";
import pdfFonts from "pdfmake/build/vfs_fonts";
import "datatables.net-dt/css/dataTables.dataTables.css";
import "datatables.net-buttons-dt/css/buttons.dataTables.css";
import "datatables.net";
import "datatables.net-buttons";
import "datatables.net-buttons/js/buttons.html5";
import "datatables.net-buttons/js/buttons.print";
import "datatables.net-buttons/js/buttons.colVis";
import jszip from "jszip";
import pdfmake from "pdfmake";

export default function BookingReports() {
    const router = useRouter();
    const [user, setUser] = useState(null);
    const [bookings, setBookings] = useState([]);
    const [darkMode, setDarkMode] = useState(false);
    const [isSidebarOpen, setIsSidebarOpen] = useState(true);
    const [startDate, setStartDate] = useState("");
    const [endDate, setEndDate] = useState("");

    useEffect(() => {
        const storedUser = JSON.parse(localStorage.getItem("user"));
        if (!storedUser || storedUser.role !== "admin") {
            router.push("/");
        } else {
            setUser(storedUser);
        }

        const savedTheme = localStorage.getItem("theme");
        if (savedTheme === "dark") {
            setDarkMode(true);
            document.documentElement.classList.add("dark");
        }

        fetchBookings();
    }, [router]);

    const fetchBookings = async () => {
        try {
            const response = await fetch("http://127.0.0.1:8000/api/bookings", {
                headers: {
                    "Authorization": `Bearer ${localStorage.getItem("token")}`,
                    "Accept": "application/json",
                },
            });
    
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
    
            const data = await response.json();
            setBookings(data.bookings || []);
    
            const jQuery = (await import("jquery")).default;
    
            if (jQuery.fn.DataTable.isDataTable("#bookingsTable")) {
                jQuery("#bookingsTable").DataTable().destroy();
            }
    
            setTimeout(() => {
                jQuery("#bookingsTable").DataTable({
                    dom: "Bfrtip",
                    buttons: [
                        "copy",
                        "csv",
                        "excel",
                        {
                            extend: "pdfHtml5",
                            text: "PDF",
                            orientation: "landscape", // Landscape mode for better fit
                            pageSize: "A4",
                            title: "Gown Rental Booking Reports",
                            customize: function (doc) {
                                // **✅ Set Header**
                                doc.content.unshift({
                                    text: "Gown Rental Booking Reports",
                                    fontSize: 18,
                                    alignment: "center",
                                    bold: true,
                                    margin: [0, 0, 0, 10], // Top margin for spacing
                                });
    
                                // **✅ Set Footer**
                                doc.content.push({
                                    text: "Generated by Gown Rental System",
                                    alignment: "center",
                                    fontSize: 10,
                                    margin: [0, 10, 0, 0], // Bottom margin
                                });
    
                                // **✅ Adjust Table Layout**
                                doc.styles.tableHeader = {
                                    fontSize: 12,
                                    bold: true,
                                    alignment: "center",
                                };
    
                                // **✅ Center the Table**
                                doc.content[1].table.widths = Array(
                                    doc.content[1].table.body[0].length
                                ).fill("*"); // Distribute columns evenly
    
                                doc.styles.tableBodyOdd = {
                                    alignment: "center",
                                };
                                doc.styles.tableBodyEven = {
                                    alignment: "center",
                                };
                            },
                        },
                        "print",
                    ],
                    destroy: true,
                });
            }, 100);
        } catch (error) {
            console.error("❌ Error fetching bookings:", error);
        }
    };
    
    

    const initializeDataTable = async () => {
        const jQuery = (await import("jquery")).default; // ✅ Load jQuery dynamically

        setTimeout(() => {
            if (!jQuery.fn.DataTable.isDataTable("#bookingsTable")) {
                jQuery("#bookingsTable").DataTable({
                    dom: "Bfrtip",
                    buttons: ["copy", "csv", "excel", "pdf", "print"],
                    destroy: true,
                });
            }
        }, 100);
    };

    const handleFilter = async () => {
        if (!startDate || !endDate) return;
    
        // Load jQuery dynamically
        const jQuery = (await import("jquery")).default;
    
        // Destroy existing DataTable before updating data
        if (jQuery.fn.DataTable.isDataTable("#bookingsTable")) {
            jQuery("#bookingsTable").DataTable().destroy();
        }
    
        // Filter bookings
        const filteredData = bookings.filter((booking) => {
            const createdAt = new Date(booking.created_at);
            return createdAt >= new Date(startDate) && createdAt <= new Date(endDate);
        });
    
        setBookings(filteredData);
    
        // Wait for table to render before initializing DataTable again
        setTimeout(() => {
            jQuery("#bookingsTable").DataTable({
                dom: "Bfrtip",
                buttons: ["copy", "csv", "excel", "pdf", "print"],
                destroy: true, // Ensure old DataTable is removed before applying a new one
            });
        }, 100);
    };
    

    return (
        <div className={`${darkMode ? "dark" : ""} flex h-screen bg-white dark:bg-[#0F172A]`}>
            <AdminSidebar 
                isSidebarOpen={isSidebarOpen} 
                toggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)} 
            />

            <div className={`flex-1 transition-all duration-300 ${isSidebarOpen ? "ml-60" : "ml-16"}`}>
                <header className="fixed top-0 w-full flex items-center justify-end bg-white dark:bg-[#0F172A] p-4 shadow-md z-10">
                    <h1 className="text-lg font-bold dark:text-white mr-auto">Gown Rental - Reports</h1>
                    <div className="flex items-center space-x-2 md:space-x-4 mr-20">
                        {user?.image ? (
                            <Image
                                src={`http://127.0.0.1:8000/storage/profile_pictures/${user.image}`}
                                alt="Profile"
                                width={32}
                                height={32}
                                className="rounded-full border border-gray-300"
                            />
                        ) : (
                            <Image
                                src="/images/default_avatar.png"
                                alt="Default Profile"
                                width={32}
                                height={32}
                                className="rounded-full border border-gray-300"
                            />
                        )}
                        <span className="dark:text-white text-sm md:text-base">{user?.name || "Admin"}</span>
                    </div>
                </header>

                <main className="p-6 mt-16">
                    <div className="flex gap-4 mb-4">
                        <input
                            type="date"
                            className="p-2 border rounded"
                            value={startDate}
                            onChange={(e) => setStartDate(e.target.value)}
                        />
                        <input
                            type="date"
                            className="p-2 border rounded"
                            value={endDate}
                            onChange={(e) => setEndDate(e.target.value)}
                        />
                        <button className="bg-blue-500 text-white px-4 py-2 rounded" onClick={handleFilter}>
                            Filter
                        </button>
                    </div>

                    <div className="bg-white dark:bg-[#1E293B] p-6 rounded-lg shadow-md">
                        <h2 className="text-xl font-semibold dark:text-white mb-4">Booking Reports</h2>
                        <table id="bookingsTable" className="display w-full border-collapse border border-gray-300 dark:border-gray-700">
                            <thead className="bg-gray-100 dark:bg-gray-800">
                                <tr>
                                    <th className="border px-4 py-2">Ref No.</th>
                                    <th className="border px-4 py-2">User ID</th>
                                    <th className="border px-4 py-2">Product ID</th>
                                    <th className="border px-4 py-2">Start Date</th>
                                    <th className="border px-4 py-2">End Date</th>
                                    <th className="border px-4 py-2">Total Price</th>
                                    <th className="border px-4 py-2">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                {bookings.length > 0 ? (
                                    bookings.map((booking) => (
                                        <tr key={booking.id} className="border border-gray-300 dark:border-gray-700">
                                            <td className="px-4 py-2">{booking.reference_number}</td>
                                            <td className="px-4 py-2">{booking.user_id}</td>
                                            <td className="px-4 py-2">{booking.product_id}</td>
                                            <td className="px-4 py-2">{format(new Date(booking.start_date), "yyyy-MM-dd")}</td>
                                            <td className="px-4 py-2">{format(new Date(booking.end_date), "yyyy-MM-dd")}</td>
                                            <td className="px-4 py-2">₱{booking.total_price}</td>
                                            <td className={`px-4 py-1 text-white text-xs font-medium text-center rounded-full inline-block w-auto min-w-[70px] mx-auto flex justify-center
                                                ${booking.status === "approved" ? "bg-green-500" :
                                                booking.status === "pending" ? "bg-yellow-500" :
                                                "bg-red-500"}`}>
                                                {booking.status}
                                            </td>
                                        </tr>
                                    ))
                                ) : (
                                    <tr><td colSpan="7" className="text-center py-4 text-gray-500">No bookings found.</td></tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                </main>
            </div>
        </div>
    );
}
